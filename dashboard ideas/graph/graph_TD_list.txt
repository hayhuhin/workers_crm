
1.save the created data for each user. - DONE
2.fix the visuals - DONE
3.add functionallity to the graph buttons(refresh query(up to 5 times,edit the query,remove graph))
4.add line graph option (not only the bar graph) - DONE
5.the presentation must be sorted by years - DONE

no sql db fields:
user specific data
graph records :{
                    graph number:{
                        graph_title,
                        graph_description,
                        graph_type,
                        graph created_at,
                        graph months,
                        graph amount
                                }
            }

example of the fields in the mongodb:
{
    '_id': ObjectId('653a0779c0792e707a004472'),
    'user_id': '2',
    'user_name': 'ben',
    'graph_records': {
        'records': {
            '000': {
                'graph_title':'comp income',
                'graph_description':'some data that for now is not important',
                'graph_type': 'bar_graph',
                'date': '2023-11-6. 14:42',
                'x': ['2023-11-01 - 2023-11-30', '2023-12-01 - 2023-12-31', '2023-10-01 - 2023-10-31'],
                'y': [1000, 3040, 50000]},

             '1': {
                'graph_type': 'line_graph',
                'date': '2023-11-6. 14:44',
                'x': ['2023-11-01 - 2023-11-30', '2023-12-01 - 2023-12-31', '2023-10-01 - 2023-10-31'],
                'y': [1000, 3040, 50000]
                }
                }}}


Graph edit section:




<<end of graph edit section >>



return render will have function inside one of the attr that checks for graph db records and will display accordingly the data

>>post request :  graph query >> class that queries the DB and records it >> the recorded db query will be represented in the frontend.

the record itself is saved and quered as nosql db because
i have to store graph data as lists 

questions:
1.how to migrate mongodb into the django project -
a.the db will be stored in the cloud or in the vps db 
b.the django app will perform CRUD functions with a python library "pymongo"

2.the structure of the keys in the db
3.how iam inserting and getting the data from the db
4.what is the django convenient way of using nosql db
5.how good the performance of using the db



steps:
1.find the specific user.
2.enter the graph_records >> records >> latest_one by the last index.

class creation:
the class will handle :
1.connection to the server
2.CRUD operations
3.methods that returns the desired data in a dict structure 

unit testing required for all possible fail cases while using the class methods

REMINDER:
need to modify the insert data method - DONE
need to add delete method - DONE
need to delete the test data that i have inserted in david users collection - DONE


now new steps to get the representation of the graph

classes i have :
1.mongodb constructor that can do CRUD operations and can store graph data
2.graph_representation that accepts the data and returns an html that represented in the page

steps that i have to do:

1.the data that i accept from the user must be stored in the mongodb 
2.every time the page reloads the data quiried from the mongodb and represented by the graph_repr class
3.



change the graph_calculator to represent the data as dict :
{
    date : "YYYY-MM-DD",
    x : [],
    y : []
}



    user_id:"1",
    user_name:"vala",
    graph_records : {
        records:{
            1000:{
                created_at:YYYY-MM-DD,
                x:[1,2,3,4,5],
                y:["a","b","c","d","e"]
            },
            1001:{
                created_at:YYYY-MM-DD,
                x:[1,2,3,4,5],
                y:["a","b","c","d","e"]
            }
    }
}


mongodb connector tasks:
create method that checks if the user exists or hes new and create for him the mongodb record
